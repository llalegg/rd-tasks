import { Task, InsertTask } from "@shared/schema";

export interface AutomaticTaskConfig {
  type: 'injury_call' | 'onboarding_call' | 'coach_assignment' | 'assessment_review';
  athleteId?: string;
  assigneeId?: string;
  priority?: 'low' | 'medium' | 'high';
  deadline?: Date;
  description?: string;
}

export class TaskGenerator {
  /**
   * Generate automatic tasks based on triggers
   */
  static generateAutomaticTasks(triggers: AutomaticTaskConfig[]): InsertTask[] {
    return triggers.map(trigger => this.createTaskFromConfig(trigger));
  }

  /**
   * Create a single task from configuration
   */
  private static createTaskFromConfig(config: AutomaticTaskConfig): InsertTask {
    const baseTask = {
      name: this.getTaskName(config.type),
      type: config.type,
      description: config.description || this.getDefaultDescription(config.type),
      assigneeId: config.assigneeId,
      priority: config.priority || 'medium',
      status: 'new' as const,
    };

    if (config.deadline) {
      return { ...baseTask, deadline: config.deadline };
    }

    return baseTask;
  }

  /**
   * Get task name based on type
   */
  private static getTaskName(type: AutomaticTaskConfig['type']): string {
    switch (type) {
      case 'injury_call':
        return 'Schedule Injury Call';
      case 'onboarding_call':
        return 'Schedule Onboarding Call';
      case 'coach_assignment':
        return 'Coach Assignment Document';
      case 'assessment_review':
        return 'Assessment Review';
      default:
        return 'Automatic Task';
    }
  }

  /**
   * Get default description based on type
   */
  private static getDefaultDescription(type: AutomaticTaskConfig['type']): string {
    switch (type) {
      case 'injury_call':
        return 'Schedule call with athlete regarding injury recovery progress';
      case 'onboarding_call':
        return 'Schedule initial onboarding call with new athlete';
      case 'coach_assignment':
        return 'Review and complete coach assignment documentation for athlete';
      case 'assessment_review':
        return 'Review assessment results that require attention';
      default:
        return 'Automatic task generated by system';
    }
  }

  /**
   * Generate tasks for new athlete onboarding
   */
  static generateOnboardingTasks(athleteId: string, assigneeId?: string): InsertTask[] {
    const tasks: AutomaticTaskConfig[] = [
      {
        type: 'onboarding_call',
        athleteId,
        assigneeId,
        priority: 'high',
        deadline: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000), // 2 days from now
      },
      {
        type: 'coach_assignment',
        athleteId,
        assigneeId,
        priority: 'medium',
        deadline: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000), // 5 days from now
      }
    ];

    return this.generateAutomaticTasks(tasks);
  }

  /**
   * Generate tasks for injury report
   */
  static generateInjuryTasks(athleteId: string, assigneeId?: string): InsertTask[] {
    const tasks: AutomaticTaskConfig[] = [
      {
        type: 'injury_call',
        athleteId,
        assigneeId,
        priority: 'high',
        deadline: new Date(Date.now() + 1 * 24 * 60 * 60 * 1000), // 1 day from now
      },
      {
        type: 'assessment_review',
        athleteId,
        assigneeId,
        priority: 'high',
        deadline: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000), // 3 days from now
      }
    ];

    return this.generateAutomaticTasks(tasks);
  }

  /**
   * Generate tasks for assessment review trigger
   */
  static generateAssessmentTasks(athleteId: string, assigneeId?: string): InsertTask[] {
    const tasks: AutomaticTaskConfig[] = [
      {
        type: 'assessment_review',
        athleteId,
        assigneeId,
        priority: 'medium',
        deadline: new Date(Date.now() + 1 * 24 * 60 * 60 * 1000), // 1 day from now
      }
    ];

    return this.generateAutomaticTasks(tasks);
  }
}

// Example usage:
/*
// Generate tasks for new athlete onboarding
const onboardingTasks = TaskGenerator.generateOnboardingTasks('athlete_123', 'coach_456');

// Generate tasks for injury report
const injuryTasks = TaskGenerator.generateInjuryTasks('athlete_789', 'therapist_101');

// Generate tasks for assessment review
const assessmentTasks = TaskGenerator.generateAssessmentTasks('athlete_456', 'analyst_202');

// Custom task generation
const customTasks = TaskGenerator.generateAutomaticTasks([
  {
    type: 'injury_call',
    athleteId: 'athlete_123',
    assigneeId: 'coach_456',
    priority: 'high',
    deadline: new Date('2024-02-01'),
    description: 'Urgent call needed for recent injury'
  }
]);
*/
